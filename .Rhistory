library(MSRDT)
library(MSRDT)
library(MSRDT)
devtools::install_github("ericchen12377/MSRDT/MSRDT")
devtools::install_github("ericchen12377/MSRDT/MSRDT")
devtools::install_github("ericchen12377/MSRDT")
devtools::install_github("ericchen12377/MSRDT/tree/master/MSRDT")
devtools::install_github("ericchen12377/MSRDT")
install.packages('Rcpp')
devtools::install_github("ericchen12377/MSRDT")
library(MSRDT)
library(MSRDT)
######Binomial RDT Design######
###Generate the prior distribution of failure probability
##Beta is conjugate prior to binomial distribution
#Get the non-informative prior Beta(1, 1)
pi <- pi_MCSim_beta(M = 5000, seed = 10, a = 1, b = 1)
#Get the consumer's risk
n = 10
R = 0.8
c = 2
b_CR <- bconsumerrisk(n = n, c = c, pi = pi, R = R)
print(b_CR)
##As n increases, CR decreases
#Get the optimal test sample size
thres_CR = 0.05 #CR < 0.05
b_n <- boptimal_n(c = 2, pi = pi, R = 0.8, thres_CR = 0.05)
print(b_n)
library(MSRDT)
######MSRDT MPCum Design######
###Generate the prior distribution of failure probability
##Dirichlet is conjugate prior to multinomial distribution
#Get the non-informative prior Dirichlet(1, 1, 1)
pi <- pi_MCSim_dirichlet(M = 5000, seed = 10, par = c(1, 1, 1))
#Get the consumer's risk
n = 10
cvec = c(1, 1)
Rvec = c(0.8, 0.7)
MPCum_CR <- MPCum_consumerrisk(n = n, cvec = cvec, pivec = pi, Rvec = Rvec)
print(MPCum_CR)
##As n increases, CR decreases
#Get the optimal test sample size
thres_CR = 0.05 #CR < 0.05
MPCum_n <- MPCum_optimal_n(cvec = cvec, pivec = pi, Rvec = Rvec, thres_CR = thres_CR)
print(MPCum_n)
devtools::use_vignette("my-vignette")
install.packages('devtools')
install.packages("devtools")
devtools::use_vignette("my-vignette")
usethis::use_vignette("Examples")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(MSRDT)
######Binomial RDT Design######
###Generate the prior distribution of failure probability
##Beta is conjugate prior to binomial distribution
#Get the non-informative prior Beta(1, 1)
pi <- pi_MCSim_beta(M = 5000, seed = 10, a = 1, b = 1)
#Get the consumer's risk
n = 10
R = 0.8
c = 2
b_CR <- bconsumerrisk(n = n, c = c, pi = pi, R = R)
print(b_CR)
#         [,1]
#>[1,] 0.3330482
##As n increases, CR decreases
#Get the optimal test sample size
thres_CR = 0.05 #CR < 0.05
b_n <- boptimal_n(c = c, pi = pi, R = R, thres_CR = thres_CR)
print(b_n)
######MSRDT MPCum Design######
###Generate the prior distribution of failure probability
##Dirichlet is conjugate prior to multinomial distribution
#Get the non-informative prior Dirichlet(1, 1, 1)
pi <- pi_MCSim_dirichlet(M = 5000, seed = 10, par = c(1, 1, 1))
#Get the consumer's risk
n = 10
cvec = c(1, 1)
Rvec = c(0.8, 0.7)
MPCum_CR <- MPCum_consumerrisk(n = n, cvec = cvec, pivec = pi, Rvec = Rvec)
print(MPCum_CR)
#>[1] 0.3383538
##As n increases, CR decreases
#Get the optimal test sample size
thres_CR = 0.05 #CR < 0.05
MPCum_n <- MPCum_optimal_n(cvec = cvec, pivec = pi, Rvec = Rvec, thres_CR = thres_CR)
######Binomial RDT Design######
###Generate the prior distribution of failure probability
##Beta is conjugate prior to binomial distribution
#Get the non-informative prior Beta(1, 1)
pi <- pi_MCSim_beta(M = 5000, seed = 10, a = 1, b = 1)
#Get the consumer's risk
n = 10
R = 0.8
c = 2
b_CR <- bconsumerrisk(n = n, c = c, pi = pi, R = R)
print(b_CR)
##As n increases, CR decreases
#Get the optimal test sample size
thres_CR = 0.05 #CR < 0.05
b_n <- boptimal_n(c = c, pi = pi, R = R, thres_CR = thres_CR)
print(b_n)
devtools::build()
browseVignettes("MSRDT")
library(MSRDT)
browseVignettes("MSRDT")
browseVignettes("MSRDT")
devtools::build_vignettes()
browseVignettes("MSRDT")
library(MSRDT)
browseVignettes("MSRDT")
library(MSRDT)
browseVignettes("MSRDT")
library(MSRDT)
browseVignettes("MSRDT")
?browseVignettes
utils::browseVignettes("MSRDT")
utils::browseVignettes(package = "MSRDT")
utils::browseVignettes("dplyr")
utils::browseVignettes("MSRDT")
devtolls::install_github("ericchen12377/MSRDT", build_vignettes = TRUE, force = TRUE)
devtools::install_github("ericchen12377/MSRDT", build_vignettes = TRUE, force = TRUE)
utils::browseVignettes("MSRDT")
utils::browseVignettes("dplyr")
utils::browseVignettes("MSRDT")
utils::browseVignettes("MSRDT")
library(MSRDT)
devtools::install_github("ericchen12377/MSRDT", build_vignettes = TRUE, force = TRUE)
library(MSRDT)
utils::browseVignettes("MSRDT")
library(MSRDT)
library(MSRDT)
MSRDT::news()
R CMD check --as-cran
library(MSRDT)
###Generate the prior distribution of failure probability
##Dirichlet is conjugate prior to multinomial distribution
#Get the non-informative prior Dirichlet(1, 1, 1)
pi <- pi_MCSim_dirichlet(M = 5000, seed = 10, par = c(1, 1, 1))
#Get the consumer's risk
n = 10
cvec = c(1, 1)
Rvec = c(0.8, 0.7)
MPCum_CR <- MPCum_consumerrisk(n = n, cvec = cvec, pivec = pi, Rvec = Rvec)
print(MPCum_CR)
##As n increases, CR decreases
#Get the optimal test sample size
thres_CR = 0.05 #CR <= 0.05
MPCum_n <- MPCum_optimal_n(cvec = cvec, pivec = pi, Rvec = Rvec, thres_CR = thres_CR)
print(MPCum_n)
###Generate the prior distribution of failure probability
##Beta is conjugate prior to binomial distribution
#Get the non-informative prior Beta(1, 1)
pi <- pi_MCSim_beta(M = 5000, seed = 10, a = 1, b = 1)
#Get the consumer's risk
n = 10
c = 2
b_CR <- bconsumerrisk(n = n, c = c, pi = pi, R = R)
R = 0.8
c = 2
b_CR <- bconsumerrisk(n = n, c = c, pi = pi, R = R)
print(b_CR)
##As n increases, CR decreases
#Get the optimal test sample size
thres_CR = 0.05 #CR < 0.05
b_n <- boptimal_n(c = c, pi = pi, R = R, thres_CR = thres_CR)
print(b_n)
setwd("G:/My Drive/research topics/2017 SRDT & warranty/2020JQT/Rpackage/OptimalRDT")
load("G:/My Drive/research topics/2017 SRDT & warranty/2020JQT/Rpackage/OptimalRDT/MS1_PF_test.RData")
library(plot3D)
set.seed(10)
tmp <- as.data.frame(MS1_real)
tmp$Wc <- W_real$W
tmp <- tmp[tmp$n<=100,]
#tmp <- tmp[sample(1:nrow(tmp),20000),]
tmp[,'R1'] <- as.numeric(as.character(tmp[,'R1']))
tmp[,'R2'] <- as.numeric(as.character(tmp[,'R2']))
tmp[,'c1'] <- as.numeric(as.character(tmp[,'c1']))
tmp[,'c2'] <- as.numeric(as.character(tmp[,'c2']))
tmp[,'Wc'] <- as.numeric(as.character(tmp[,'Wc']))
tmp$RP <- 1 - tmp$AP
tmp$W <- tmp$Wc
tmp.R2 <- tmp[tmp[,'R2']==0.82,]
tmp.c1 <- tmp[tmp[,'c1']==0,]
tmp.R2.c1 <- tmp.R2[tmp.R2[,'c1']==0,]
tmp.c1.c2 <- tmp.c1[tmp.c1[,'c2']==0,]
tmp.c1.c2.n <- tmp.c1.c2[tmp.c1.c2[, 'n']<30,]
tmp.R1.R2 <- tmp.R2[tmp.R2[,'R1']==0.94,]
tmp.R1.R2.c1 <- tmp.R1.R2[tmp.R1.R2[,'c1']==0,]
tmp.R2.c1.c2 <- tmp.R2.c1[tmp.R2.c1[,'c2']==2,]
W_optimal_real <- W_convert(MS1_optimal_real,c(1,0.7),1,pi_real)
W_optimal_real$W
par(family='serif')
par(mgp=c(4,1.5,0))
par(mar = c(6, 7, 3, 3.5))
theta_fix = 70
phi_fix = 30
x_lab <- 'CR'
y_lab <- 'PR'
c_lab <- 'n'
scatter2D(tmp_PF1[,'CR'],tmp_PF1[,'PR'],
colvar = tmp_PF1[,'n'],
#xlim = c(0,0.05),ylim = c(0.25,0.5),
cex=0.5,pch=19,col = gray.colors(10,start = 0.1,end=0.95),
cex.lab = cex.lab, cex.axis = cex.axis, colkey = list(cex.clab = cex.clab, cex.axis = cex.axis),
clab = c_lab,xlab = x_lab, ylab = y_lab)
points2D(MS1_optimal_real[1,'CR'],MS1_optimal_real[1,'PR'],
#colvar = MS1_optimal_real[1,'n'],
cex=2,pch=19,col = 4, add = TRUE)
points2D(MS1_optimal_real[1:7,'CR'],MS1_optimal_real[1:7,'PR'],
#colvar = MS1_optimal_real[1,'n'],
cex=1,pch=17,col = 2, add = TRUE)
# lines2D(c(0,MS1_optimal_real[1,'CR']),c(0.25,MS1_optimal_real[1,'PR']),
#         #colvar = MS1_optimal_real[1:7,'n'],
#         cex=2,pch=19,col = 4, add = TRUE)
# points2D(0,0,
#          #colvar = b_optimal_real[1,'n'],
#          cex=3,pch=10,col = 2, add = TRUE)
# points2D(b_optimal_real[1,'CR'],b_optimal_real[1,'PR'],
#          #colvar = MS1_optimal_real[1,'n'],
#          cex=2,pch=19,col = 2, add = TRUE)
# lines2D(c(0,b_optimal_real[1,'CR']),c(0.25,b_optimal_real[1,'PR']),
#         #colvar = b_optimal_real[1,'n'],
#         cex=2,pch=19,col = 2, add = TRUE)
legend('topright',legend = c('MO-MSRDT','MSRDT_org','MSRDT_relax'),col = c('grey',4,2),
bty = 'n', pch = c(19,19,17), cex = 2.5)
pdf("G:/My Drive/research topics/2017 SRDT & warranty/JQT target/manuscript/figures/Comp_MSRDTMO_MSRDT_CRPR.pdf",
width=10, height=8)
par(family='serif')
par(mgp=c(4,1.5,0))
par(mar = c(6, 7, 3, 3.5))
theta_fix = 70
phi_fix = 30
x_lab <- 'CR'
y_lab <- 'PR'
c_lab <- 'n'
scatter2D(tmp_PF1[,'CR'],tmp_PF1[,'PR'],
colvar = tmp_PF1[,'n'],
#xlim = c(0,0.05),ylim = c(0.25,0.5),
cex=0.5,pch=19,col = gray.colors(10,start = 0.1,end=0.95),
cex.lab = cex.lab, cex.axis = cex.axis, colkey = list(cex.clab = cex.clab, cex.axis = cex.axis),
clab = c_lab,xlab = x_lab, ylab = y_lab)
points2D(MS1_optimal_real[1,'CR'],MS1_optimal_real[1,'PR'],
#colvar = MS1_optimal_real[1,'n'],
cex=2,pch=19,col = 4, add = TRUE)
points2D(MS1_optimal_real[1:7,'CR'],MS1_optimal_real[1:7,'PR'],
#colvar = MS1_optimal_real[1,'n'],
cex=1,pch=17,col = 2, add = TRUE)
# lines2D(c(0,MS1_optimal_real[1,'CR']),c(0.25,MS1_optimal_real[1,'PR']),
#         #colvar = MS1_optimal_real[1:7,'n'],
#         cex=2,pch=19,col = 4, add = TRUE)
# points2D(0,0,
#          #colvar = b_optimal_real[1,'n'],
#          cex=3,pch=10,col = 2, add = TRUE)
# points2D(b_optimal_real[1,'CR'],b_optimal_real[1,'PR'],
#          #colvar = MS1_optimal_real[1,'n'],
#          cex=2,pch=19,col = 2, add = TRUE)
# lines2D(c(0,b_optimal_real[1,'CR']),c(0.25,b_optimal_real[1,'PR']),
#         #colvar = b_optimal_real[1,'n'],
#         cex=2,pch=19,col = 2, add = TRUE)
legend('topright',legend = c('MO-MPBRDT','SO_org','SO_relax'),col = c('grey',4,2),
bty = 'n', pch = c(19,19,17), cex = 2.5)
dev.off()
dev.off()
##########Compare-PF################################################################################################
pdf("G:/My Drive/research topics/2017 SRDT & warranty/JQT target/manuscript/figures/Comp_MSRDTMO_MSRDT_CRPR.pdf",
width=10, height=8)
##########Compare-PF################################################################################################
pdf("G:/My Drive/research topics/2017 SRDT & warranty/2020JQT/manuscript/figures/Comp_MSRDTMO_MSRDT_CRPR.pdf",
width=10, height=8)
par(family='serif')
par(mgp=c(4,1.5,0))
par(mar = c(6, 7, 3, 3.5))
theta_fix = 70
phi_fix = 30
x_lab <- 'CR'
y_lab <- 'PR'
c_lab <- 'n'
scatter2D(tmp_PF1[,'CR'],tmp_PF1[,'PR'],
colvar = tmp_PF1[,'n'],
#xlim = c(0,0.05),ylim = c(0.25,0.5),
cex=0.5,pch=19,col = gray.colors(10,start = 0.1,end=0.95),
cex.lab = cex.lab, cex.axis = cex.axis, colkey = list(cex.clab = cex.clab, cex.axis = cex.axis),
clab = c_lab,xlab = x_lab, ylab = y_lab)
points2D(MS1_optimal_real[1,'CR'],MS1_optimal_real[1,'PR'],
#colvar = MS1_optimal_real[1,'n'],
cex=2,pch=19,col = 4, add = TRUE)
points2D(MS1_optimal_real[1:7,'CR'],MS1_optimal_real[1:7,'PR'],
#colvar = MS1_optimal_real[1,'n'],
cex=1,pch=17,col = 2, add = TRUE)
legend('topright',legend = c('MO-MPBRDT','SO_org','SO_relax'),col = c('grey',4,2),
bty = 'n', pch = c(19,19,17), cex = 2.5)
dev.off()
pdf("G:/My Drive/research topics/2017 SRDT & warranty/2020JQT/manuscript/figures/Comp_MSRDTMO_MSRDT_CRRP.pdf",
width=10, height=8)
par(family='serif')
par(mgp=c(4,1.5,0))
par(mar = c(6, 7, 3, 3.5))
theta_fix = 70
phi_fix = 30
x_lab <- 'CR'
y_lab <- 'RP'
c_lab <- 'n'
scatter2D(tmp_PF1[,'CR'],1- tmp_PF1[,'AP'],
colvar = tmp_PF1[,'n'],
#xlim = c(0,0.05),ylim = c(0.25,0.5),
cex=0.5,pch=19,col = gray.colors(10,start = 0.1,end=0.95),
cex.lab = cex.lab, cex.axis = cex.axis, colkey = list(cex.clab = cex.clab, cex.axis = cex.axis),
clab = c_lab,xlab = x_lab, ylab = y_lab)
points2D(MS1_optimal_real[1,'CR'],1 - MS1_optimal_real[1,'AP'],
#colvar = MS1_optimal_real[1,'n'],
cex=2,pch=19,col = 4, add = TRUE)
points2D(MS1_optimal_real[1:7,'CR'], 1- MS1_optimal_real[1:7,'AP'],
#colvar = MS1_optimal_real[1,'n'],
cex=1,pch=17,col = 2, add = TRUE)
legend('bottomleft',legend = c('MO-MPBRDT','SO_org','SO_relax'),col = c('grey',4,2),
bty = 'n', pch = c(19,19,17), cex = 2)
dev.off()
pdf("G:/My Drive/research topics/2017 SRDT & warranty/2020JQT/manuscript/figures/Comp_MSRDTMO_MSRDT_CRn.pdf",
width=10, height=8)
par(family='serif')
par(mgp=c(4,1.5,0))
par(mar = c(6, 7, 3, 4.5))
theta_fix = 70
phi_fix = 30
x_lab <- 'CR'
y_lab <- 'n'
c_lab <- 'W'
scatter2D(tmp_PF1[,'CR'],tmp_PF1[,'n'],
colvar = tmp_PF1[,'Wc'],
#xlim = c(0,0.05),ylim = c(0.25,0.5),
cex=0.5,pch=19,col = gray.colors(10,start = 0.1,end=0.95),
cex.lab = cex.lab, cex.axis = cex.axis, colkey = list(cex.clab = cex.clab, cex.axis = cex.axis),
clab = c_lab,xlab = x_lab, ylab = y_lab)
points2D(MS1_optimal_real[1,'CR'],MS1_optimal_real[1,'n'],
#colvar = MS1_optimal_real[1,'n'],
cex=2,pch=19,col = 4, add = TRUE)
points2D(MS1_optimal_real[1:7,'CR'],MS1_optimal_real[1:7,'n'],
#colvar = MS1_optimal_real[1,'n'],
cex=1,pch=17,col = 2, add = TRUE)
legend('bottomleft',legend = c('MO-MPBRDT','SO_org','SO_relax'),col = c('grey',4,2),
bty = 'n', pch = c(19,19,17), cex = 2)
dev.off()
pdf("G:/My Drive/research topics/2017 SRDT & warranty/2020JQT/manuscript/figures/Comp_MSRDTMO_MSRDT_WPR.pdf",
width=10, height=8)
par(family='serif')
par(mgp=c(4,1.5,0))
par(mar = c(6, 7, 3, 4.5))
theta_fix = 70
phi_fix = 30
x_lab <- 'W'
y_lab <- 'PR'
c_lab <- 'n'
scatter2D(tmp_PF1[,'Wc'],tmp_PF1[,'PR'],
colvar = tmp_PF1[,'n'],
#xlim = c(0,0.05),ylim = c(0.25,0.5),
cex=0.5,pch=19,col = gray.colors(10,start = 0.1,end=0.95),
cex.lab = cex.lab, cex.axis = cex.axis, colkey = list(cex.clab = cex.clab, cex.axis = cex.axis),
clab = c_lab,xlab = x_lab, ylab = y_lab)
points2D(MS1_optimal_real[1,'Wc'],MS1_optimal_real[1,'PR'],
#colvar = MS1_optimal_real[1,'n'],
cex=2,pch=19,col = 4, add = TRUE)
points2D(MS1_optimal_real[1:7,'Wc'],MS1_optimal_real[1:7,'PR'],
#colvar = MS1_optimal_real[1,'n'],
cex=1,pch=17,col = 2, add = TRUE)
legend('bottomleft',legend = c('MO-MPBRDT','SO_org','SO_relax'),col = c('grey',4,2),
bty = 'n', pch = c(19,19,17), cex = 2)
dev.off()
pdf("G:/My Drive/research topics/2017 SRDT & warranty/2020JQT/manuscript/figures/Comp_MSRDTMO_MSRDT_WRP.pdf",
width=10, height=8)
par(family='serif')
par(mgp=c(4,1.5,0))
par(mar = c(6, 7, 3, 4.5))
theta_fix = 70
phi_fix = 30
x_lab <- 'W'
y_lab <- 'RP'
c_lab <- 'n'
scatter2D(tmp_PF1[,'Wc'],tmp_PF1[,'RP'],
colvar = tmp_PF1[,'n'],
#xlim = c(0,0.05),ylim = c(0.25,0.5),
cex=0.5,pch=19,col = gray.colors(10,start = 0.1,end=0.95),
cex.lab = cex.lab, cex.axis = cex.axis, colkey = list(cex.clab = cex.clab, cex.axis = cex.axis),
clab = c_lab,xlab = x_lab, ylab = y_lab)
points2D(MS1_optimal_real[1,'Wc'],1 - MS1_optimal_real[1,'AP'],
#colvar = MS1_optimal_real[1,'n'],
cex=2,pch=19,col = 4, add = TRUE)
points2D(MS1_optimal_real[1:7,'Wc'],1 - MS1_optimal_real[1:7,'AP'],
#colvar = MS1_optimal_real[1,'n'],
cex=1,pch=17,col = 2, add = TRUE)
legend('bottomleft',legend = c('MO-MPBRDT','SO_org','SO_relax'),col = c('grey',4,2),
bty = 'n', pch = c(19,19,17), cex = 2)
dev.off()
pdf("G:/My Drive/research topics/2017 SRDT & warranty/2020JQT/manuscript/figures/Comp_MSRDTMO_MSRDT_Wn.pdf",
width=10, height=8)
par(family='serif')
par(mgp=c(4,1.5,0))
par(mar = c(6, 7, 3, 4.5))
theta_fix = 70
phi_fix = 30
x_lab <- 'W'
y_lab <- 'n'
c_lab <- 'Wc'
scatter2D(tmp_PF1[,'Wc'],tmp_PF1[,'n'],
#colvar = tmp_PF1[,'Wc'],
#xlim = c(0,0.05),ylim = c(0.25,0.5),
cex=0.5,pch=19,col = gray.colors(1,start = 0.1,end=0.95),
cex.lab = cex.lab, cex.axis = cex.axis, colkey = list(cex.clab = cex.clab, cex.axis = cex.axis),
clab = c_lab,
xlab = x_lab, ylab = y_lab)
points2D(MS1_optimal_real[1,'Wc'],MS1_optimal_real[1,'n'],
#colvar = MS1_optimal_real[1,'n'],
cex=2,pch=19,col = 4, add = TRUE)
points2D(MS1_optimal_real[1:7,'Wc'],MS1_optimal_real[1:7,'n'],
#colvar = MS1_optimal_real[1,'n'],
cex=1,pch=17,col = 2, add = TRUE)
legend('bottomleft',legend = c('MO-MPBRDT','SO_org','SO_relax'),col = c('grey',4,2),
bty = 'n', pch = c(19,19,17), cex = 2)
dev.off()
pdf("G:/My Drive/research topics/2017 SRDT & warranty/2020JQT/manuscript/figures/Comp_MSRDTMO_MSRDT_CRW.pdf",
width=10, height=8)
par(family='serif')
par(mgp=c(4,1.5,0))
par(mar = c(6, 7, 3, 4.5))
theta_fix = 70
phi_fix = 30
x_lab <- 'CR'
y_lab <- 'W'
c_lab <- 'n'
scatter2D(tmp_PF1[,'CR'],tmp_PF1[,'Wc'],
colvar = tmp_PF1[,'n'],
#xlim = c(0,0.05),
ylim = c(0.08,0.2),
cex=0.5,pch=19,col = gray.colors(10,start = 0.1,end=0.95),
cex.lab = cex.lab, cex.axis = cex.axis, colkey = list(cex.clab = cex.clab, cex.axis = cex.axis),
clab = c_lab,xlab = x_lab, ylab = y_lab)
points2D(MS1_optimal_real[1,'CR'],MS1_optimal_real[1,'Wc'],
#colvar = MS1_optimal_real[1,'n'],
cex=2,pch=19,col = 4, add = TRUE)
points2D(MS1_optimal_real[1:7,'CR'],MS1_optimal_real[1:7,'Wc'],
#colvar = MS1_optimal_real[1,'n'],
cex=1,pch=17,col = 2, add = TRUE)
legend('topright',legend = c('MO-MPBRDT','SO_org','SO_relax'),col = c('grey',4,2),
bty = 'n', pch = c(19,19,17), cex = 2)
dev.off()
install.packages("gtools")
install.packages("reshape2")
install.packages("dplyr")
library(MSRDT)
\documentclass{article}
install.packages("roxygen2")
install.packages("rmarkdown")
install.packages("tinytex")
install.packages("tidyverse")
library(MSRDT)
