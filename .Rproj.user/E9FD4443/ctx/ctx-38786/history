library(MSRDT)
library(MSRDT)
library(MSRDT)
devtools::install_github("ericchen12377/MSRDT/MSRDT")
devtools::install_github("ericchen12377/MSRDT/MSRDT")
devtools::install_github("ericchen12377/MSRDT")
devtools::install_github("ericchen12377/MSRDT/tree/master/MSRDT")
devtools::install_github("ericchen12377/MSRDT")
install.packages('Rcpp')
devtools::install_github("ericchen12377/MSRDT")
library(MSRDT)
library(MSRDT)
######Binomial RDT Design######
###Generate the prior distribution of failure probability
##Beta is conjugate prior to binomial distribution
#Get the non-informative prior Beta(1, 1)
pi <- pi_MCSim_beta(M = 5000, seed = 10, a = 1, b = 1)
#Get the consumer's risk
n = 10
R = 0.8
c = 2
b_CR <- bconsumerrisk(n = n, c = c, pi = pi, R = R)
print(b_CR)
##As n increases, CR decreases
#Get the optimal test sample size
thres_CR = 0.05 #CR < 0.05
b_n <- boptimal_n(c = 2, pi = pi, R = 0.8, thres_CR = 0.05)
print(b_n)
library(MSRDT)
######MSRDT MPCum Design######
###Generate the prior distribution of failure probability
##Dirichlet is conjugate prior to multinomial distribution
#Get the non-informative prior Dirichlet(1, 1, 1)
pi <- pi_MCSim_dirichlet(M = 5000, seed = 10, par = c(1, 1, 1))
#Get the consumer's risk
n = 10
cvec = c(1, 1)
Rvec = c(0.8, 0.7)
MPCum_CR <- MPCum_consumerrisk(n = n, cvec = cvec, pivec = pi, Rvec = Rvec)
print(MPCum_CR)
##As n increases, CR decreases
#Get the optimal test sample size
thres_CR = 0.05 #CR < 0.05
MPCum_n <- MPCum_optimal_n(cvec = cvec, pivec = pi, Rvec = Rvec, thres_CR = thres_CR)
print(MPCum_n)
devtools::use_vignette("my-vignette")
install.packages('devtools')
install.packages("devtools")
devtools::use_vignette("my-vignette")
usethis::use_vignette("Examples")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(MSRDT)
######Binomial RDT Design######
###Generate the prior distribution of failure probability
##Beta is conjugate prior to binomial distribution
#Get the non-informative prior Beta(1, 1)
pi <- pi_MCSim_beta(M = 5000, seed = 10, a = 1, b = 1)
#Get the consumer's risk
n = 10
R = 0.8
c = 2
b_CR <- bconsumerrisk(n = n, c = c, pi = pi, R = R)
print(b_CR)
#         [,1]
#>[1,] 0.3330482
##As n increases, CR decreases
#Get the optimal test sample size
thres_CR = 0.05 #CR < 0.05
b_n <- boptimal_n(c = c, pi = pi, R = R, thres_CR = thres_CR)
print(b_n)
######MSRDT MPCum Design######
###Generate the prior distribution of failure probability
##Dirichlet is conjugate prior to multinomial distribution
#Get the non-informative prior Dirichlet(1, 1, 1)
pi <- pi_MCSim_dirichlet(M = 5000, seed = 10, par = c(1, 1, 1))
#Get the consumer's risk
n = 10
cvec = c(1, 1)
Rvec = c(0.8, 0.7)
MPCum_CR <- MPCum_consumerrisk(n = n, cvec = cvec, pivec = pi, Rvec = Rvec)
print(MPCum_CR)
#>[1] 0.3383538
##As n increases, CR decreases
#Get the optimal test sample size
thres_CR = 0.05 #CR < 0.05
MPCum_n <- MPCum_optimal_n(cvec = cvec, pivec = pi, Rvec = Rvec, thres_CR = thres_CR)
######Binomial RDT Design######
###Generate the prior distribution of failure probability
##Beta is conjugate prior to binomial distribution
#Get the non-informative prior Beta(1, 1)
pi <- pi_MCSim_beta(M = 5000, seed = 10, a = 1, b = 1)
#Get the consumer's risk
n = 10
R = 0.8
c = 2
b_CR <- bconsumerrisk(n = n, c = c, pi = pi, R = R)
print(b_CR)
##As n increases, CR decreases
#Get the optimal test sample size
thres_CR = 0.05 #CR < 0.05
b_n <- boptimal_n(c = c, pi = pi, R = R, thres_CR = thres_CR)
print(b_n)
devtools::build()
browseVignettes("MSRDT")
library(MSRDT)
browseVignettes("MSRDT")
browseVignettes("MSRDT")
devtools::build_vignettes()
browseVignettes("MSRDT")
library(MSRDT)
browseVignettes("MSRDT")
library(MSRDT)
browseVignettes("MSRDT")
library(MSRDT)
browseVignettes("MSRDT")
?browseVignettes
utils::browseVignettes("MSRDT")
utils::browseVignettes(package = "MSRDT")
utils::browseVignettes("dplyr")
utils::browseVignettes("MSRDT")
devtolls::install_github("ericchen12377/MSRDT", build_vignettes = TRUE, force = TRUE)
devtools::install_github("ericchen12377/MSRDT", build_vignettes = TRUE, force = TRUE)
utils::browseVignettes("MSRDT")
utils::browseVignettes("dplyr")
utils::browseVignettes("MSRDT")
utils::browseVignettes("MSRDT")
library(MSRDT)
devtools::install_github("ericchen12377/MSRDT", build_vignettes = TRUE, force = TRUE)
library(MSRDT)
utils::browseVignettes("MSRDT")
library(MSRDT)
library(MSRDT)
MSRDT::news()
R CMD check --as-cran
